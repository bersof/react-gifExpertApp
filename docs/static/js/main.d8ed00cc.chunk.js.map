{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","Category","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,sBAAMC,SAVS,SAACC,GAChBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IACxBR,GAAc,SAAAS,GAAI,OAAIP,GAAJ,mBAAkBO,OACpCN,EAAc,MAMlB,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAlBgB,SAACP,GACrBF,EAAcE,EAAEQ,OAAOF,a,+BCNlBG,EAAO,uCAAE,WAAOC,GAAP,uBAAAC,EAAA,6DACZC,EADY,iDACmCC,UAAUH,GAD7C,+DAEMI,MAAMF,GAFZ,cAEZG,EAFY,gBAGGA,EAAUC,OAHb,uBAGXC,EAHW,EAGXA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EACzB,MAAO,CACHC,GAASD,EAAIC,GACbC,MAASF,EAAIE,MACbV,IAAG,UAAMQ,EAAIG,cAAV,aAAM,EAAYC,iBAAiBZ,QAR5B,kBAaXM,GAbW,4CAAF,sDCEPO,EAAc,SAAC,GAAsB,IAArBJ,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEpC,OADAc,QAAQC,IAAIN,EAAIC,EAAOV,GAEnB,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCHHS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SACrB,ECFwB,SAACsB,GAGzB,MAA0BpC,mBAAS,CAC/BqB,KAAK,GACLgB,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAW,WACP3B,EAAQuB,GACPK,MAAM,SAAAC,GAAOH,EAAS,CACnBlB,KAAMqB,EACNL,SAAS,SAGf,CAACD,IAEIE,EDfqBK,CAAa7B,GAA7Ba,EAAZ,EAAON,KAAYgB,EAAnB,EAAmBA,QAEnB,OACI,qCACCA,GAAW,4CAEZ,oBAAIL,UAAU,oCAAd,SAAmDlB,IACnD,qBAAKkB,UAAU,YAAf,SAEYL,EAAOJ,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAEMA,GADGA,EAAIC,aEPtBmB,EAAe,WAKxB,MAAoC5C,mBAAS,CAAC,cAA9C,mBAAO6C,EAAP,KAAmB9C,EAAnB,KAOA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAMI8C,EAAWtB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAUA,GADHA,Y,MC3B/BgC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d8ed00cc.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [inputValue, setinputValue] = useState('')\r\n    const handleInputChange=(e)=>{\r\n        setinputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n        if(inputValue.trim().length>2){\r\n            setCategories(cats =>[inputValue,...cats]);            \r\n            setinputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n          <input \r\n            type=\"text\"\r\n            value={inputValue}\r\n            onChange={handleInputChange}\r\n         />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes={\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs =async( category )=>{\r\n    const url=`https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=KotczHd9Dszc49jUvWhyzC0u7nkwggW1`;\r\n    const respuesta = await fetch(url);\r\n    const {data} = await respuesta.json();\r\n    const gifs = data.map( img =>{\r\n        return {\r\n            id      :img.id,\r\n            title   :img.title,\r\n            url     :img.images?.downsized_medium.url\r\n\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    console.log(id, title, url)\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n    const {data:images,loading}=useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n        {loading && <p>Cargando...</p>}\r\n    \r\n        <h3 className='animate__animated animate__fadeIn'>{category}</h3>        \r\n        <div className='card-grid'>\r\n                {\r\n                    images.map( img =>(\r\n                      <GifGridItem \r\n                        key = {img.id}\r\n                        {...img} \r\n                      />\r\n                    ))\r\n                }                        \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (Category)=>{\r\n\r\n\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading:true,\r\n    });\r\n\r\n    useEffect( ()=>{\r\n        getGifs(Category)\r\n        .then( imgs=>{setstate({\r\n            data: imgs,\r\n            loading: false,\r\n        });\r\n        })\r\n    },[Category]) \r\n\r\n    return state; // {data:[], loading:true}\r\n}","//Componente <> </> Frament\r\n//Snippet rafc\r\nimport React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\n\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    //const categories = ['One Punch','Samurai X','Dragon Ball'];\r\n    //Hook\r\n    //const [categories, setCategories] = useState(['One Punch','Samurai X','Dragon Ball'])\r\n    const [categories, setCategories] = useState(['One Punch'])\r\n\r\n   /* const handleAdd=() =>{\r\n        //setcategories(['HunterX',...categories]);\r\n        setCategories( cats => [...cats,'HunterX']);\r\n    }*/\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr />            \r\n            <ol>\r\n            {\r\n/*                categories.map( category => {()\r\n                    return <GifGrid category={category} />\r\n                    //return <li key={category}>{category}</li>\r\n                })*/\r\n                categories.map( category => (\r\n                    <GifGrid \r\n                        key = {category}\r\n                        category={category} \r\n                    />\r\n                ))\r\n            }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}